name: build-test
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, edited, synchronize]
  workflow_dispatch:
  schedule:
    - cron: '00 01 * * *'

env:
  msrv: 1.46
  latest_libseccomp: v2.5.5

jobs:
  validate:
    name: Format and Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install upstream libseccomp
        run: sudo ./scripts/install_libseccomp.sh
      - name: Prepare for rustfmt and clippy
        run: rustup component add rustfmt clippy
      - name: Run rustfmt
        run: make fmt
      - name: Run clippy
        run: make clippy

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        libseccomp-version: [v2.4.3, v2.5.1, v2.5.3, v2.5.4, v2.5.5]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install upstream libseccomp
        uses: ./.github/actions/setup
        with:
          version: ${{ matrix.libseccomp-version }}
      - name: Build crate
        run: make debug
      - name: Build crate with all features
        run: |
          make clean
          make debug-all
      - name: Run test
        run: make test

  static-link-musl:
    name: Statically Linking with musl
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        libseccomp-version: [v2.4.3, v2.5.1, v2.5.3, v2.5.4, v2.5.5]
        target:
          - x86_64-unknown-linux-musl
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        run: rustup target add ${{ matrix.target }}
      - name: Install musl gcc
        run: sudo apt-get install musl-tools
      - name: Install upstream libseccomp
        uses: ./.github/actions/setup
        with:
          version: ${{ matrix.libseccomp-version }}
          link-type: static
      - name: Build crate
        run: cargo build --target ${{ matrix.target }}
      - name: Run test
        run: cargo test --target ${{ matrix.target }} -- --nocapture --test-threads 1
      - name: Build crate with all features
        run: |
          cargo clean
          cargo build --target ${{ matrix.target }} --all-features
      - name: Run test
        run: cargo test --target ${{ matrix.target }} --all-features -- --nocapture --test-threads 1

  cross:
    name: Cross Compilation
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - i686-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - arm-unknown-linux-gnueabihf
          #- mips-unknown-linux-gnu # It has been dropped to Tier 3 since 1.72
          #- mips64-unknown-linux-gnuabi64 # It has been dropped to Tier 3 since 1.72
          - powerpc-unknown-linux-gnu
          - powerpc64-unknown-linux-gnu
          - riscv64gc-unknown-linux-gnu
          - s390x-unknown-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install libseccomp
        run: sudo apt-get install libseccomp-dev
      - name: Install Rust toolchain
        run: rustup target add ${{ matrix.target }}
      - name: Build crate
        run: cargo build --target ${{ matrix.target }} --all-features

  asan:
    name: Address Sanitizer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install upstream libseccomp
        uses: ./.github/actions/setup
        with:
          version: ${{ env.latest_libseccomp }}
      - name: Install Rust toolchain
        run: rustup +nightly target add x86_64-unknown-linux-gnu
      - name: Run test with address sanitizer
        run: cargo +nightly test --target x86_64-unknown-linux-gnu --tests -- --color always --nocapture --test-threads 1
        env:
          RUSTFLAGS: -Z sanitizer=address

  msrv:
    name: MSRV
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.msrv }}
        run: rustup default ${{ env.msrv }}
      - name: Install upstream libseccomp
        uses: ./.github/actions/setup
        with:
          version: ${{ env.latest_libseccomp }}
      - name: Build crate with all target and features
        run: |
          cargo -vV
          cargo clean
          cargo build --all-targets --all-features
      - name: Run test
        run: cargo test --all-targets --all-features -- --nocapture --test-threads 1

  msrv_compat:
    name: MSRV Compat
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [1.52, 1.53]
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ matrix.rust }}
        run: rustup default ${{ matrix.rust }}
      - name: Install upstream libseccomp
        uses: ./.github/actions/setup
        with:
          version: ${{ env.latest_libseccomp }}
      - name: Build crate with all target and features
        run: |
          cargo -vV
          cargo clean
          cargo build --all-targets --all-features
      - name: Run test
        run: cargo test --all-targets --all-features -- --nocapture --test-threads 1

  doc:
    name: Documentation Check
    runs-on: ubuntu-latest
    env:
      RUSTDOCFLAGS: -Dwarnings
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install the nightly toolchain
        run: rustup install nightly
      - name: Generate documentations
        run: make doc

  codespell:
    name: Check Spelling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install codespell
        run: pip install codespell
      - name: Run codespell
        run: codespell

  readme:
    name: Readme Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Verify that the libseccomp crate version is up to date in README
        run: grep -q "$(sed -n 's/^version = \(.*\)/libseccomp = \1/p' libseccomp/Cargo.toml)" README.md

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Install upstream libseccomp
        uses: ./.github/actions/setup
        with:
          version: ${{ env.latest_libseccomp }}
      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info -- --test-threads 1
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: true
